from typing import List

class Solution:
    def unionSet(self, x, y):
        px = self.findSet(x)
        py = self.findSet(y)
        if px == py:
            return False
        if self.rank[px] > self.rank[py]:
            self.par[py] = px
        elif self.rank[px] < self.rank[py]:
            self.par[px] = py
        else:
            self.par[px] = py
            self.rank[py] += 1
        return True

    def findSet(self, x):
        if self.par[x] == x:
            return x
        self.par[x] = self.findSet(self.par[x])
        return self.par[x]

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        N = len(graph)
        self.par = [i for i in range(N)]
        self.rank = [1] * N

        # Union-Find to connect the graph components
        for i in range(N):
            for j in range(i + 1, N):
                if graph[i][j] == 1:
                    self.unionSet(i, j)

        # Find the size of each connected component
        componentSize = [0] * N
        for i in range(N):
            root = self.findSet(i)
            componentSize[root] += 1

        # Find the number of initially infected nodes in each component
        infectedCount = [0] * N
        for node in initial:
            root = self.findSet(node)
            infectedCount[root] += 1

        # Sort initial to guarantee the smallest index if tie
        initial.sort()

        resultNode = initial[0]
        maxComponentSize = 0

        # Determine the node to remove
        for node in initial:
            root = self.findSet(node)
            if infectedCount[root] == 1:
                if componentSize[root] > maxComponentSize:
                    maxComponentSize = componentSize[root]
                    resultNode = node
                elif componentSize[root] == maxComponentSize and node < resultNode:
                    resultNode = node

        return resultNode

# Example usage
solution = Solution()
graph = [[1, 1, 0], [1, 1, 0], [0, 0, 1]]
initial = [0, 1]
print(solution.minMalwareSpread(graph, initial))  # Output: 0 or 1
